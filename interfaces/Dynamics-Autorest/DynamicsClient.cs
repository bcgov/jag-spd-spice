// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Jag.Spice.Interfaces
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// This OData service is located at
    /// https://spd-spice.dev.jag.gov.bc.ca/api/data/v9.0/
    /// </summary>
    public partial class DynamicsClient : ServiceClient<DynamicsClient>, IDynamicsClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set; }

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default value is
        /// 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set; }

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When set to
        /// true a unique x-ms-client-request-id value is generated and included in
        /// each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set; }

        /// <summary>
        /// Gets the IAccountsOperations.
        /// </summary>
        public virtual IAccountsOperations Accounts { get; private set; }

        /// <summary>
        /// Gets the IContactsOperations.
        /// </summary>
        public virtual IContactsOperations Contacts { get; private set; }

        /// <summary>
        /// Gets the IIncidentsOperations.
        /// </summary>
        public virtual IIncidentsOperations Incidents { get; private set; }

        /// <summary>
        /// Gets the IInvoicesOperations.
        /// </summary>
        public virtual IInvoicesOperations Invoices { get; private set; }

        /// <summary>
        /// Gets the ISavedqueriesOperations.
        /// </summary>
        public virtual ISavedqueriesOperations Savedqueries { get; private set; }

        /// <summary>
        /// Gets the ISharepointdocumentlocationsOperations.
        /// </summary>
        public virtual ISharepointdocumentlocationsOperations Sharepointdocumentlocations { get; private set; }

        /// <summary>
        /// Gets the ISharepointsitesOperations.
        /// </summary>
        public virtual ISharepointsitesOperations Sharepointsites { get; private set; }

        /// <summary>
        /// Gets the IAccountcaseassignmentsOperations.
        /// </summary>
        public virtual IAccountcaseassignmentsOperations Accountcaseassignments { get; private set; }

        /// <summary>
        /// Gets the IAliasesesOperations.
        /// </summary>
        public virtual IAliasesesOperations Aliaseses { get; private set; }

        /// <summary>
        /// Gets the ICompaniesOperations.
        /// </summary>
        public virtual ICompaniesOperations Companies { get; private set; }

        /// <summary>
        /// Gets the IContactaccountsetOperations.
        /// </summary>
        public virtual IContactaccountsetOperations Contactaccountset { get; private set; }

        /// <summary>
        /// Gets the IExportrequestincidentsetOperations.
        /// </summary>
        public virtual IExportrequestincidentsetOperations Exportrequestincidentset { get; private set; }

        /// <summary>
        /// Gets the IExportrequestsOperations.
        /// </summary>
        public virtual IExportrequestsOperations Exportrequests { get; private set; }

        /// <summary>
        /// Gets the IGovministriesOperations.
        /// </summary>
        public virtual IGovministriesOperations Govministries { get; private set; }

        /// <summary>
        /// Gets the ILcrblicencetypesOperations.
        /// </summary>
        public virtual ILcrblicencetypesOperations Lcrblicencetypes { get; private set; }

        /// <summary>
        /// Gets the IMinistriesOperations.
        /// </summary>
        public virtual IMinistriesOperations Ministries { get; private set; }

        /// <summary>
        /// Gets the IMinistryemployeesOperations.
        /// </summary>
        public virtual IMinistryemployeesOperations Ministryemployees { get; private set; }

        /// <summary>
        /// Gets the IPreviousaddressesesOperations.
        /// </summary>
        public virtual IPreviousaddressesesOperations Previousaddresseses { get; private set; }

        /// <summary>
        /// Gets the IReasonforscreeningsOperations.
        /// </summary>
        public virtual IReasonforscreeningsOperations Reasonforscreenings { get; private set; }

        /// <summary>
        /// Gets the IRequiredchecksesOperations.
        /// </summary>
        public virtual IRequiredchecksesOperations Requiredcheckses { get; private set; }

        /// <summary>
        /// Gets the IServicesesOperations.
        /// </summary>
        public virtual IServicesesOperations Serviceses { get; private set; }

        /// <summary>
        /// Gets the IBusinesscaseprocessesOperations.
        /// </summary>
        public virtual IBusinesscaseprocessesOperations Businesscaseprocesses { get; private set; }

        /// <summary>
        /// Gets the IProcessesOperations.
        /// </summary>
        public virtual IProcessesOperations Processes { get; private set; }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        protected DynamicsClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Accounts = new AccountsOperations(this);
            Contacts = new ContactsOperations(this);
            Incidents = new IncidentsOperations(this);
            Invoices = new InvoicesOperations(this);
            Savedqueries = new SavedqueriesOperations(this);
            Sharepointdocumentlocations = new SharepointdocumentlocationsOperations(this);
            Sharepointsites = new SharepointsitesOperations(this);
            Accountcaseassignments = new AccountcaseassignmentsOperations(this);
            Aliaseses = new AliasesesOperations(this);
            Companies = new CompaniesOperations(this);
            Contactaccountset = new ContactaccountsetOperations(this);
            Exportrequestincidentset = new ExportrequestincidentsetOperations(this);
            Exportrequests = new ExportrequestsOperations(this);
            Govministries = new GovministriesOperations(this);
            Lcrblicencetypes = new LcrblicencetypesOperations(this);
            Ministries = new MinistriesOperations(this);
            Ministryemployees = new MinistryemployeesOperations(this);
            Previousaddresseses = new PreviousaddressesesOperations(this);
            Reasonforscreenings = new ReasonforscreeningsOperations(this);
            Requiredcheckses = new RequiredchecksesOperations(this);
            Serviceses = new ServicesesOperations(this);
            Businesscaseprocesses = new BusinesscaseprocessesOperations(this);
            Processes = new ProcessesOperations(this);
            BaseUri = new System.Uri("https://spd-spice.dev.jag.gov.bc.ca/api/data/v9.0");
            AcceptLanguage = "en-US";
            LongRunningOperationRetryTimeout = 30;
            GenerateClientRequestId = true;
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new CloudErrorJsonConverter());
        }
    }
}
