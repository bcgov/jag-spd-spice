// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Jag.Spice.Interfaces.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// LocalizedLabel
    /// </summary>
    public partial class MicrosoftDynamicsCRMLocalizedLabel
    {
        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftDynamicsCRMLocalizedLabel class.
        /// </summary>
        public MicrosoftDynamicsCRMLocalizedLabel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// MicrosoftDynamicsCRMLocalizedLabel class.
        /// </summary>
        public MicrosoftDynamicsCRMLocalizedLabel(string label = default(string), int? languageCode = default(int?), bool? isManaged = default(bool?), string metadataId = default(string), bool? hasChanged = default(bool?))
        {
            Label = label;
            LanguageCode = languageCode;
            IsManaged = isManaged;
            MetadataId = metadataId;
            HasChanged = hasChanged;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Label")]
        public string Label { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LanguageCode")]
        public int? LanguageCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "IsManaged")]
        public bool? IsManaged { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "MetadataId")]
        public string MetadataId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HasChanged")]
        public bool? HasChanged { get; set; }

    }
}
