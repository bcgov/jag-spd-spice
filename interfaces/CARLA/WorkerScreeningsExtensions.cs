// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WorkerScreenings.
    /// </summary>
    public static partial class WorkerScreeningsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void POST(this IWorkerScreenings operations, IList<CompletedWorkerScreening> body = default(IList<CompletedWorkerScreening>))
            {
                operations.POSTAsync(body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task POSTAsync(this IWorkerScreenings operations, IList<CompletedWorkerScreening> body = default(IList<CompletedWorkerScreening>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.POSTWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse POSTWithHttpMessages(this IWorkerScreenings operations, IList<CompletedWorkerScreening> body = default(IList<CompletedWorkerScreening>), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.POSTWithHttpMessagesAsync(body, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workerIdString'>
            /// </param>
            /// <param name='bearer'>
            /// </param>
            public static void POST1(this IWorkerScreenings operations, string workerIdString, string bearer = default(string))
            {
                operations.POST1Async(workerIdString, bearer).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workerIdString'>
            /// </param>
            /// <param name='bearer'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task POST1Async(this IWorkerScreenings operations, string workerIdString, string bearer = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.POST1WithHttpMessagesAsync(workerIdString, bearer, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workerIdString'>
            /// </param>
            /// <param name='bearer'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse POST1WithHttpMessages(this IWorkerScreenings operations, string workerIdString, string bearer = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.POST1WithHttpMessagesAsync(workerIdString, bearer, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
