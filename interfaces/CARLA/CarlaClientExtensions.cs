// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Gov.Lclb.Cllb.Interfaces
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CarlaClient.
    /// </summary>
    public static partial class CarlaClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='results'>
            /// </param>
            public static void ReceiveApplicationScreeningResult(this ICarlaClient operations, IList<ApplicationScreeningResponse> results = default(IList<ApplicationScreeningResponse>))
            {
                operations.ReceiveApplicationScreeningResultAsync(results).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='results'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReceiveApplicationScreeningResultAsync(this ICarlaClient operations, IList<ApplicationScreeningResponse> results = default(IList<ApplicationScreeningResponse>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReceiveApplicationScreeningResultWithHttpMessagesAsync(results, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='results'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse ReceiveApplicationScreeningResultWithHttpMessages(this ICarlaClient operations, IList<ApplicationScreeningResponse> results = default(IList<ApplicationScreeningResponse>), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.ReceiveApplicationScreeningResultWithHttpMessagesAsync(results, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static void SendApplicationScreeningRequest(this ICarlaClient operations, string applicationId)
            {
                operations.SendApplicationScreeningRequestAsync(applicationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendApplicationScreeningRequestAsync(this ICarlaClient operations, string applicationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendApplicationScreeningRequestWithHttpMessagesAsync(applicationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse SendApplicationScreeningRequestWithHttpMessages(this ICarlaClient operations, string applicationId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SendApplicationScreeningRequestWithHttpMessagesAsync(applicationId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secret'>
            /// </param>
            public static string GetToken(this ICarlaClient operations, string secret = default(string))
            {
                return operations.GetTokenAsync(secret).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secret'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetTokenAsync(this ICarlaClient operations, string secret = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTokenWithHttpMessagesAsync(secret, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='secret'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse<string> GetTokenWithHttpMessages(this ICarlaClient operations, string secret = default(string), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.GetTokenWithHttpMessagesAsync(secret, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='results'>
            /// </param>
            public static void ReceiveWorkerScreeningResults(this ICarlaClient operations, IList<WorkerScreeningResponse> results = default(IList<WorkerScreeningResponse>))
            {
                operations.ReceiveWorkerScreeningResultsAsync(results).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='results'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReceiveWorkerScreeningResultsAsync(this ICarlaClient operations, IList<WorkerScreeningResponse> results = default(IList<WorkerScreeningResponse>), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ReceiveWorkerScreeningResultsWithHttpMessagesAsync(results, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='results'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse ReceiveWorkerScreeningResultsWithHttpMessages(this ICarlaClient operations, IList<WorkerScreeningResponse> results = default(IList<WorkerScreeningResponse>), Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.ReceiveWorkerScreeningResultsWithHttpMessagesAsync(results, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workerId'>
            /// </param>
            public static void SendWorkerScreeningRequest(this ICarlaClient operations, string workerId)
            {
                operations.SendWorkerScreeningRequestAsync(workerId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workerId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SendWorkerScreeningRequestAsync(this ICarlaClient operations, string workerId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SendWorkerScreeningRequestWithHttpMessagesAsync(workerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='workerId'>
            /// </param>
            /// <param name='customHeaders'>
            /// Headers that will be added to request.
            /// </param>
            public static HttpOperationResponse SendWorkerScreeningRequestWithHttpMessages(this ICarlaClient operations, string workerId, Dictionary<string, List<string>> customHeaders = null)
            {
                return operations.SendWorkerScreeningRequestWithHttpMessagesAsync(workerId, customHeaders, CancellationToken.None).ConfigureAwait(false).GetAwaiter().GetResult();
            }

    }
}
